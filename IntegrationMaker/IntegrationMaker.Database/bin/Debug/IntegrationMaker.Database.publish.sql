/*
Deployment script for IntegrationMaker

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "IntegrationMaker"
:setvar DefaultFilePrefix "IntegrationMaker"
:setvar DefaultDataPath ""
:setvar DefaultLogPath ""

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
IF EXISTS (SELECT 1
           FROM   [sys].[databases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET ANSI_NULLS ON,
                ANSI_PADDING ON,
                ANSI_WARNINGS ON,
                ARITHABORT ON,
                CONCAT_NULL_YIELDS_NULL ON,
                NUMERIC_ROUNDABORT OFF,
                QUOTED_IDENTIFIER ON,
                ANSI_NULL_DEFAULT ON,
                CURSOR_CLOSE_ON_COMMIT OFF,
                AUTO_CREATE_STATISTICS ON,
                AUTO_SHRINK OFF,
                AUTO_UPDATE_STATISTICS ON,
                RECURSIVE_TRIGGERS OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [sys].[databases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET ALLOW_SNAPSHOT_ISOLATION OFF;
    END


GO
IF EXISTS (SELECT 1
           FROM   [sys].[databases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET AUTO_UPDATE_STATISTICS_ASYNC OFF,
                DATE_CORRELATION_OPTIMIZATION OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [sys].[databases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET AUTO_CREATE_STATISTICS ON(INCREMENTAL = OFF) 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [sys].[databases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET QUERY_STORE (QUERY_CAPTURE_MODE = AUTO, OPERATION_MODE = READ_WRITE, DATA_FLUSH_INTERVAL_SECONDS = 900, INTERVAL_LENGTH_MINUTES = 60, MAX_PLANS_PER_QUERY = 200, CLEANUP_POLICY = (STALE_QUERY_THRESHOLD_DAYS = 30), MAX_STORAGE_SIZE_MB = 100) 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [sys].[databases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE SCOPED CONFIGURATION SET MAXDOP = 0;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET MAXDOP = PRIMARY;
        ALTER DATABASE SCOPED CONFIGURATION SET LEGACY_CARDINALITY_ESTIMATION = OFF;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET LEGACY_CARDINALITY_ESTIMATION = PRIMARY;
        ALTER DATABASE SCOPED CONFIGURATION SET PARAMETER_SNIFFING = ON;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET PARAMETER_SNIFFING = PRIMARY;
        ALTER DATABASE SCOPED CONFIGURATION SET QUERY_OPTIMIZER_HOTFIXES = OFF;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET QUERY_OPTIMIZER_HOTFIXES = PRIMARY;
    END


GO
IF EXISTS (SELECT 1
           FROM   [sys].[databases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET TEMPORAL_HISTORY_RETENTION ON 
            WITH ROLLBACK IMMEDIATE;
    END


GO
PRINT N'Creating [dbo].[IntegrationLog]...';


GO
CREATE TABLE [dbo].[IntegrationLog] (
    [Id]                     BIGINT IDENTITY (1, 1) NOT NULL,
    [IntegrationId]          BIGINT NOT NULL,
    [IntegrationErrorNumber] BIGINT NULL
);


GO
PRINT N'Creating [dbo].[IntegrationCredential]...';


GO
CREATE TABLE [dbo].[IntegrationCredential] (
    [Id]                BIGINT         IDENTITY (1, 1) NOT NULL,
    [AccountIdentifier] NVARCHAR (500) NULL,
    [Username]          NVARCHAR (500) NULL,
    [IntegrationId]     BIGINT         NOT NULL,
    [Password]          NVARCHAR (500) NULL,
    [Token]             NVARCHAR (100) NULL,
    [CratedUTC]         DATETIME       NOT NULL,
    [LastModifiedUTC]   DATETIME       NULL,
    CONSTRAINT [PK_IntegrationCredential] PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [dbo].[IntegrationType]...';


GO
CREATE TABLE [dbo].[IntegrationType] (
    [Id]         BIGINT         IDENTITY (1, 1) NOT NULL,
    [Name]       NVARCHAR (500) NOT NULL,
    [CreatedUTC] DATETIME       NOT NULL,
    CONSTRAINT [PK_IntegrationTypes] PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [dbo].[IntegrationErrorCode]...';


GO
CREATE TABLE [dbo].[IntegrationErrorCode] (
    [Id]                      BIGINT         IDENTITY (1, 1) NOT NULL,
    [Number]                  BIGINT         NOT NULL,
    [Name]                    NVARCHAR (500) NOT NULL,
    [UserfriendlyDescreption] NVARCHAR (MAX) NOT NULL,
    [TechnicalDescription]    NVARCHAR (MAX) NOT NULL,
    CONSTRAINT [PK_IntegrationErrorCodes] PRIMARY KEY CLUSTERED ([Number] ASC)
);


GO
PRINT N'Creating [dbo].[Integration]...';


GO
CREATE TABLE [dbo].[Integration] (
    [Id]                BIGINT        IDENTITY (1, 1) NOT NULL,
    [IntegrationTypeId] BIGINT        NOT NULL,
    [CreatedUTC]        DATETIME      NOT NULL,
    [LastModifiedUTC]   DATETIME      NULL,
    [Name]              VARCHAR (500) NOT NULL,
    CONSTRAINT [PK_Integration] PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [dbo].[FK_IntegrationLog_Integration]...';


GO
ALTER TABLE [dbo].[IntegrationLog]
    ADD CONSTRAINT [FK_IntegrationLog_Integration] FOREIGN KEY ([IntegrationId]) REFERENCES [dbo].[Integration] ([Id]);


GO
PRINT N'Creating [dbo].[FK_IntegrationLog_IntegrationErrorCode]...';


GO
ALTER TABLE [dbo].[IntegrationLog]
    ADD CONSTRAINT [FK_IntegrationLog_IntegrationErrorCode] FOREIGN KEY ([IntegrationErrorNumber]) REFERENCES [dbo].[IntegrationErrorCode] ([Number]);


GO
PRINT N'Creating [dbo].[FK_IntegrationCredential_Integration]...';


GO
ALTER TABLE [dbo].[IntegrationCredential]
    ADD CONSTRAINT [FK_IntegrationCredential_Integration] FOREIGN KEY ([IntegrationId]) REFERENCES [dbo].[Integration] ([Id]);


GO
PRINT N'Creating [dbo].[FK_Integration_IntegrationType]...';


GO
ALTER TABLE [dbo].[Integration]
    ADD CONSTRAINT [FK_Integration_IntegrationType] FOREIGN KEY ([IntegrationTypeId]) REFERENCES [dbo].[IntegrationType] ([Id]);


GO
DECLARE @VarDecimalSupported AS BIT;

SELECT @VarDecimalSupported = 0;

IF ((ServerProperty(N'EngineEdition') = 3)
    AND (((@@microsoftversion / power(2, 24) = 9)
          AND (@@microsoftversion & 0xffff >= 3024))
         OR ((@@microsoftversion / power(2, 24) = 10)
             AND (@@microsoftversion & 0xffff >= 1600))))
    SELECT @VarDecimalSupported = 1;

IF (@VarDecimalSupported > 0)
    BEGIN
        EXECUTE sp_db_vardecimal_storage_format N'$(DatabaseName)', 'ON';
    END


GO
PRINT N'Update complete.';


GO
